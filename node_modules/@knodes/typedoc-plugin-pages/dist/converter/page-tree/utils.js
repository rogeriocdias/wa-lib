"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodePath = exports.getNodeUrl = exports.getDir = exports.join = void 0;
const assert_1 = __importDefault(require("assert"));
const lodash_1 = require("lodash");
const typedoc_1 = require("typedoc");
const path_1 = require("@knodes/typedoc-pluginutils/path");
const reflections_1 = require("../../models/reflections");
const join = (...segments) => {
    const segmentsNormalized = segments.filter(lodash_1.isString).map(typedoc_1.normalizePath);
    const joined = (0, typedoc_1.normalizePath)((0, path_1.join)(...segmentsNormalized));
    const leadingDots = segmentsNormalized[0].match(/^((\.{1,2}[/\\])+)/);
    return `${leadingDots ? leadingDots[0] : ''}${joined}`;
};
exports.join = join;
const trimExt = (file) => {
    if (!file.match(/\.[^/.]+$/)) {
        throw new Error(`Invalid non-extension filename "${file}"`);
    }
    return file.replace(/\.[^/.]+$/, '');
};
const getDir = (node, kind) => {
    var _a;
    const childKey = `children${(0, lodash_1.startCase)(kind)}Dir`;
    const childVal = node[childKey];
    if ((0, lodash_1.isString)(childVal)) {
        return childVal;
    }
    else if ((0, lodash_1.isString)(node.childrenDir)) {
        return node.childrenDir;
    }
    else {
        const val = node[kind];
        if (!(0, lodash_1.isString)(val)) {
            if (kind === 'output') {
                return (_a = node.childrenDir) !== null && _a !== void 0 ? _a : (node.source ? trimExt(node.source) : '.');
            }
            return '.';
        }
        return trimExt(val);
    }
};
exports.getDir = getDir;
const getNodeUrl = (node) => {
    if (node.output) {
        if (node.output.endsWith('.html')) {
            return node.output;
        }
        else {
            // TODO: Maybe throw if config
            return `${node.output}.html`;
        }
    }
    else {
        (0, assert_1.default)(node.source);
        const filenameNoExt = trimExt(node.source);
        if (node.children && (0, lodash_1.isNil)(node.childrenDir) && (0, lodash_1.isNil)(node.childrenOutputDir)) {
            return `${filenameNoExt}/index.html`;
        }
        return `${filenameNoExt}.html`;
    }
};
exports.getNodeUrl = getNodeUrl;
const getNodePath = (self, parent) => [parent, self]
    .filter(lodash_1.isObject)
    .flatMap(iterateNodeName)
    .map(p => JSON.stringify(p)).join(' â‡¥ ');
exports.getNodePath = getNodePath;
const iterateNodeName = (node) => {
    if (node instanceof reflections_1.ANodeReflection) {
        return [...iterateNodeName(node.parent), node.name];
    }
    else if (node instanceof typedoc_1.Reflection) {
        return [];
    }
    else if (node) {
        return [node.name];
    }
    else {
        return [];
    }
};
//# sourceMappingURL=utils.js.map