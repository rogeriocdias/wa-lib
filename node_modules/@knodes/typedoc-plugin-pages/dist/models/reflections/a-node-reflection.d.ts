import { ContainerReflection, DeclarationReflection, ProjectReflection, TraverseCallback } from 'typedoc';
import { PagesPluginReflectionKind } from './reflection-kind';
export declare class ANodeReflection extends ContainerReflection {
    readonly module: ANodeReflection.Module;
    parent: ANodeReflection.Parent;
    get depth(): number;
    get isModuleAppendix(): boolean;
    childrenNodes?: ANodeReflection[] | undefined;
    children?: undefined;
    constructor(name: string, kind: PagesPluginReflectionKind, module: ANodeReflection.Module, parent?: ANodeReflection.Parent);
    /**
     * Iterate over all children & childrenNodes of this node reflection.
     *
     * @param callback - The function to invoke on each child.
     */
    traverse(callback: TraverseCallback): void;
}
export declare namespace ANodeReflection {
    type Module = ProjectReflection | DeclarationReflection;
    type Parent = Module | ANodeReflection;
}
//# sourceMappingURL=a-node-reflection.d.ts.map