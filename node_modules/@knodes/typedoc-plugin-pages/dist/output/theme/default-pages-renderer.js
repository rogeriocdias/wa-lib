"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPagesRenderer = void 0;
const assert_1 = __importDefault(require("assert"));
const fs_1 = require("fs");
const lodash_1 = require("lodash");
const typedoc_1 = require("typedoc");
const typedoc_pluginutils_1 = require("@knodes/typedoc-pluginutils");
const path_1 = require("@knodes/typedoc-pluginutils/path");
const reflections_1 = require("../../models/reflections");
const getPageNameComponents = (reflection) => reflection.parent instanceof reflections_1.ANodeReflection ?
    [...getPageNameComponents(reflection.parent), reflection.name] :
    [];
const getFullPageName = (page) => getPageNameComponents(page).join(' > ');
const CSS_FILE_NAME = 'assets/pages.css';
class DefaultPagesRenderer {
    constructor(plugin, event) {
        var _a;
        this.plugin = plugin;
        this._currentPageMemo = typedoc_pluginutils_1.CurrentPageMemo.for(this);
        this._nodeDeclarationMappingCache = new WeakMap();
        (0, assert_1.default)(plugin.application.renderer.theme instanceof typedoc_1.DefaultTheme);
        this._theme = plugin.application.renderer.theme;
        const modulesPages = event.project.getReflectionsByKind(reflections_1.PagesPluginReflectionKind.ROOT);
        (0, assert_1.default)(modulesPages.every((n) => n instanceof reflections_1.ANodeReflection));
        this._modulesPages = modulesPages;
        modulesPages.forEach(n => this._mapNode(n));
        const pages = event.project.getReflectionsByKind(reflections_1.PagesPluginReflectionKind.PAGE).filter(p => !p.kindOf(reflections_1.PagesPluginReflectionKind.ROOT));
        (0, assert_1.default)(pages.every((n) => n instanceof reflections_1.PageReflection));
        this._allPages = pages;
        event.urls = [...((_a = event.urls) !== null && _a !== void 0 ? _a : []), ...pages.map(p => new typedoc_1.UrlMapping(p.url, p, this._renderPage.bind(this)))];
        plugin.application.renderer.on(typedoc_1.PageEvent.BEGIN, this._onRendererBeginPage.bind(this));
        plugin.application.renderer.on(typedoc_1.PageEvent.END, this._onRendererEndPage.bind(this));
        plugin.application.renderer.on(typedoc_1.RendererEvent.END, this._onRendererEnd.bind(this));
        plugin.application.renderer.hooks.on('head.end', context => typedoc_1.JSX.createElement("link", { rel: "stylesheet", href: context.relativeURL(CSS_FILE_NAME) }));
        plugin.application.renderer.on(typedoc_1.IndexEvent.PREPARE_INDEX, this._onRendererPrepareIndex.bind(this));
    }
    /**
     * Render a link to a given page.
     *
     * @param root0 - The rendering context with the target page & label.
     * @returns the generated link.
     */
    renderPageLink({ page, label }) {
        var _a;
        return typedoc_1.JSX.createElement("a", { href: this._theme.markedPlugin.getRelativeUrl(page.isModuleAppendix ? (_a = page.module.url) !== null && _a !== void 0 ? _a : assert_1.default.fail() : page.url) }, label !== null && label !== void 0 ? label : page.originalName);
    }
    /**
     * Render a single page reflection.
     *
     * @param props - The page event for the page reflection.
     * @returns the rendered page.
     */
    _renderPage(props) {
        const { icons } = this._theme.getRenderContext(props);
        const icon = () => icons[typedoc_1.ReflectionKind.Module]();
        icons[reflections_1.PagesPluginReflectionKind.PAGE] = icon;
        icons[reflections_1.PagesPluginReflectionKind.PAGE | reflections_1.PagesPluginReflectionKind.ROOT] = icon;
        icons[reflections_1.PagesPluginReflectionKind.MENU] = icon;
        icons[reflections_1.PagesPluginReflectionKind.MENU | reflections_1.PagesPluginReflectionKind.ROOT] = icon;
        const castedProps = props;
        return this._theme.indexTemplate(castedProps);
    }
    /**
     * Map a node reflection to a similar declaration, mimicing Typedoc default rendering process.
     *
     * @param node - The node to map.
     * @param parent - The parent to set on the node (for recursive calls).
     * @returns the new declaration reflection.
     */
    _mapNode(node, parent = node.module) {
        var _a, _b;
        const declaration = new typedoc_1.DeclarationReflection(node.name, typedoc_1.ReflectionKind.Namespace, parent);
        declaration.url = node instanceof reflections_1.PageReflection ? node.url : undefined;
        declaration.children = (_a = node.childrenNodes) === null || _a === void 0 ? void 0 : _a.map(c => this._mapNode(c, node.isModuleAppendix ? node.module : declaration));
        declaration.cssClasses = [
            'pages-entry',
            `pages-entry-${node instanceof reflections_1.PageReflection ? 'page' : 'menu'}`,
            `pages-entry-depth-${node.depth}`,
        ].filter(lodash_1.isString).join(' ');
        declaration.readme = (_b = node.comment) === null || _b === void 0 ? void 0 : _b.summary;
        declaration.sources = node.sources;
        this._nodeDeclarationMappingCache.set(node, declaration);
        return declaration;
    }
    /**
     * Append a new restoration hook to execute on page rendering end.
     *
     * @see _onRendererBeginPage
     * @see _onRendererEndPage
     * @param collect - A function to get the current state.
     * @param fn - A function executed with the state retrieved via {@link collect} that restores the previous state.
     */
    _addRestore(collect, fn) {
        const collected = collect();
        const restore = this._renderPageRestore;
        this._renderPageRestore = () => {
            restore === null || restore === void 0 ? void 0 : restore();
            fn(collected);
        };
    }
    /**
     * Retrieve declaration reflections that are mirrors of inputted node reflections.
     *
     * @param nodeReflections - The node reflections to map.
     * @returns the mapped node reflections.
     */
    _mapNodeReflectionsToDeclarations(nodeReflections) {
        var _a;
        return (_a = nodeReflections === null || nodeReflections === void 0 ? void 0 : nodeReflections.map(cc => {
            const node = this._nodeDeclarationMappingCache.get(cc);
            (0, assert_1.default)(node);
            return node;
        })) !== null && _a !== void 0 ? _a : [];
    }
    /**
     * Event callback executed on every page on {@link PageEvent.BEGIN}.
     *
     * @see _onRendererBeginPageAlterModel
     * @see _onRendererBeginPageAlterNavigation
     * @param pageEvent - The page event to alter.
     */
    _onRendererBeginPage(pageEvent) {
        this._onRendererBeginPageAlterModel(pageEvent);
        this._onRendererBeginPageAlterNavigation(pageEvent);
    }
    /**
     * Partial implementation of {@link _onRendererBeginPage} that prepares the navigation for a single page.
     *
     * @param pageEvent - The page event to alter.
     */
    _onRendererBeginPageAlterNavigation(pageEvent) {
        var _a;
        this._addRestore(() => pageEvent.project.children, prev => pageEvent.project.children = prev);
        const modelModule = (0, typedoc_pluginutils_1.getReflectionModule)(pageEvent.model);
        const projectPages = this._modulesPages.find(p => p.module === pageEvent.project);
        pageEvent.project.children = [
            ...this._mapNodeReflectionsToDeclarations(projectPages === null || projectPages === void 0 ? void 0 : projectPages.childrenNodes),
            ...((_a = pageEvent.project.children) !== null && _a !== void 0 ? _a : []).map(projectChild => {
                var _a;
                if (projectChild.kindOf(typedoc_1.ReflectionKind.Module) && modelModule === projectChild) {
                    const modulePage = this._modulesPages.find(p => p.module === projectChild);
                    if (modulePage) {
                        this._addRestore(() => projectChild.children, prev => projectChild.children = prev);
                        projectChild.children = [
                            ...this._mapNodeReflectionsToDeclarations(modulePage.childrenNodes),
                            ...((_a = projectChild.children) !== null && _a !== void 0 ? _a : []),
                        ];
                    }
                }
                return projectChild;
            }),
        ];
    }
    /**
     * Partial implementation of {@link _onRendererBeginPage} responsible of modifying the page mode. Node reflections are replaced with a similar declaration,
     * and modules/projects are prepended with root pages sources.
     *
     * @param pageEvent - The page event to alter.
     */
    _onRendererBeginPageAlterModel(pageEvent) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (pageEvent.model instanceof reflections_1.ANodeReflection) {
            const newModel = this._nodeDeclarationMappingCache.get(pageEvent.model);
            (0, assert_1.default)(newModel);
            this._addRestore(() => newModel.children, v => newModel.children = v);
            newModel.children = [
                ...((_a = newModel.children) !== null && _a !== void 0 ? _a : []),
                ...((_c = (_b = pageEvent.model.module.children) === null || _b === void 0 ? void 0 : _b.filter(c => !c.kindOf(typedoc_1.ReflectionKind.SomeModule))) !== null && _c !== void 0 ? _c : []),
            ];
            pageEvent.model = newModel;
        }
        else if ((pageEvent.model instanceof typedoc_1.ProjectReflection && pageEvent.url === 'index.html') ||
            (pageEvent.model instanceof typedoc_1.DeclarationReflection && pageEvent.model.kindOf(typedoc_1.ReflectionKind.Module))) {
            const modulePage = this._modulesPages.find(p => p.module === pageEvent.model);
            if (modulePage instanceof reflections_1.PageReflection) {
                pageEvent.model.sources = [
                    ...((_d = pageEvent.model.sources) !== null && _d !== void 0 ? _d : []),
                    typedoc_pluginutils_1.reflectionSourceUtils.createSourceReference(this, modulePage.sourceFilePath),
                ];
                pageEvent.model.readme = [
                    ...((_f = (_e = pageEvent.model.readme) === null || _e === void 0 ? void 0 : _e.concat([{ kind: 'text', text: '\n\n---\n\n' }])) !== null && _f !== void 0 ? _f : []),
                    ...(((_g = modulePage.comment) === null || _g === void 0 ? void 0 : _g.summary) ?
                        [
                            { kind: 'text', text: `\n\n<!-- Page ${modulePage.namedPath} -->\n\n` },
                            ...modulePage.comment.summary,
                        ] :
                        []),
                ];
            }
        }
    }
    /**
     * Event callback executed on every page on {@link PageEvent.END}.
     * It undoes changes made by {@link _onRendererBeginPage}.
     *
     * @param _pageEvent - The page event to alter.
     */
    _onRendererEndPage(_pageEvent) {
        (0, assert_1.default)(this._renderPageRestore);
        this._renderPageRestore();
    }
    /**
     * Event callback executed once on {@link RendererEvent.END}.
     * Copy assets to the output directory.
     *
     * @param event - The {@link RendererEvent.END} event.
     */
    _onRendererEnd(event) {
        const dest = (0, path_1.join)(event.outputDirectory, CSS_FILE_NAME);
        const src = this.plugin.resolvePackageFile('static/pages.css');
        (0, fs_1.copyFileSync)(src, dest);
    }
    /**
     * Event callback executed once on {@link IndexEvent.PREPARE_INDEX}.
     * Adds the plugin's pages to the search index.
     *
     * @param indexEvent - The original index event.
     */
    _onRendererPrepareIndex(indexEvent) {
        indexEvent.searchResults = [
            ...indexEvent.searchResults,
            ...this._allPages.map(r => {
                const searchResPage = new typedoc_1.DeclarationReflection(getFullPageName(r), reflections_1.PagesPluginReflectionKind.PAGE, undefined);
                searchResPage.cssClasses = 'pages-entry pages-entry-page';
                searchResPage.url = r.url;
                return searchResPage;
            }),
        ];
    }
}
exports.DefaultPagesRenderer = DefaultPagesRenderer;
//# sourceMappingURL=default-pages-renderer.js.map