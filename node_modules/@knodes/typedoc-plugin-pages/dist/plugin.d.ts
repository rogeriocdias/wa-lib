import { Application } from 'typedoc';
import { ABasePlugin } from '@knodes/typedoc-pluginutils';
export declare class PagesPlugin extends ABasePlugin {
    readonly pluginOptions: import("@knodes/typedoc-pluginutils").OptionGroup<import("./options").IPluginOptions, {
        enablePageLinks: {
            help: string;
            type: import("typedoc").ParameterType.Boolean;
            defaultValue: true;
        } & {
            name: "enablePageLinks";
        } & import("typedoc").BooleanDeclarationOption;
        enableSearch: {
            help: string;
            type: import("typedoc").ParameterType.Boolean;
            defaultValue: true;
        } & {
            name: "enableSearch";
        } & import("typedoc").BooleanDeclarationOption;
        invalidPageLinkHandling: {
            help: string;
            type: import("typedoc").ParameterType.Map;
            map: typeof import("./options").EInvalidPageLinkHandling;
            defaultValue: import("./options").EInvalidPageLinkHandling;
        } & {
            name: "invalidPageLinkHandling";
        } & import("typedoc").MapDeclarationOption<unknown>;
        pages: {
            help: string;
            type: import("typedoc").ParameterType.Mixed;
            validate: (v: unknown) => void;
        } & {
            name: "pages";
        } & import("typedoc").MixedDeclarationOption;
        output: {
            help: string;
            type: import("typedoc").ParameterType.String;
            defaultValue: string;
        } & {
            name: "output";
        } & import("typedoc").StringDeclarationOption;
        source: {
            help: string;
            type: import("typedoc").ParameterType.String;
            defaultValue: string;
        } & {
            name: "source";
        } & import("typedoc").StringDeclarationOption;
        logLevel: {
            help: string;
            type: import("typedoc").ParameterType.Map;
            map: typeof import("typedoc").LogLevel;
            defaultValue: import("typedoc").LogLevel;
        } & {
            name: "logLevel";
        } & import("typedoc").MapDeclarationOption<unknown>;
        excludeMarkdownTags: {
            help: string;
            type: import("typedoc").ParameterType.Array;
            validate: (patterns: string[]) => void;
        } & {
            name: "excludeMarkdownTags";
        } & import("typedoc").ArrayDeclarationOption;
    }>;
    private readonly _reflectionCommentReplacer;
    private _themeMethods?;
    constructor(application: Application);
    /**
     * This method is called after the plugin has been instantiated.
     */
    initialize(): void;
    /**
     * Event callback executed once on {@link Converter.EVENT_RESOLVE_BEGIN}.
     * It registers node reflections in the project.
     *
     * @param context - The Typedoc context.
     */
    private _onConverterResolveBegin;
    /**
     * Event callback executed once on {@link RendererEvent.BEGIN}.
     * It setups @page tags replacement in markdown.
     *
     * @param event - The Typedoc renderer event.
     */
    private _onRendererBegin;
}
//# sourceMappingURL=plugin.d.ts.map