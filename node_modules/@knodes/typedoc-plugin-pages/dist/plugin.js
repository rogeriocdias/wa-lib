"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagesPlugin = void 0;
const typedoc_1 = require("typedoc");
const typedoc_pluginutils_1 = require("@knodes/typedoc-pluginutils");
const page_tree_1 = require("./converter/page-tree");
const reflections_1 = require("./models/reflections");
const options_1 = require("./options");
const output_1 = require("./output");
class PagesPlugin extends typedoc_pluginutils_1.ABasePlugin {
    constructor(application) {
        super(application, __filename);
        this.pluginOptions = (0, options_1.buildOptions)(this);
        this._reflectionCommentReplacer = new typedoc_pluginutils_1.ReflectionCommentReplacer(this);
    }
    /**
     * This method is called after the plugin has been instantiated.
     */
    initialize() {
        this.application.converter.on(typedoc_1.Converter.EVENT_RESOLVE_BEGIN, this._onConverterResolveBegin.bind(this));
        this.application.renderer.on(typedoc_1.RendererEvent.BEGIN, this._onRendererBegin.bind(this), null, 1);
        typedoc_pluginutils_1.EventsExtra.for(this.application)
            .beforeOptionsFreeze(() => {
            if (this.pluginOptions.getValue().enablePageLinks) {
                this._reflectionCommentReplacer.registerInlineTag('@page'); // Preserve {@page} tags for being replaced in markdown
            }
        });
    }
    /**
     * Event callback executed once on {@link Converter.EVENT_RESOLVE_BEGIN}.
     * It registers node reflections in the project.
     *
     * @param context - The Typedoc context.
     */
    _onConverterResolveBegin(context) {
        const rootMenu = new page_tree_1.PageTreeBuilder(this).buildPagesTree(context.project, this.pluginOptions.getValue());
        const registerNodes = (ref) => {
            if (ref instanceof reflections_1.ANodeReflection) {
                context.project.registerReflection(ref);
            }
            ref.traverse(registerNodes);
        };
        rootMenu.traverse(registerNodes);
    }
    /**
     * Event callback executed once on {@link RendererEvent.BEGIN}.
     * It setups @page tags replacement in markdown.
     *
     * @param event - The Typedoc renderer event.
     */
    _onRendererBegin(event) {
        this._themeMethods = (0, output_1.getPagesPluginThemeMethods)(this, event);
        if (this.pluginOptions.getValue().enablePageLinks) {
            (0, output_1.bindReplaceMarkdown)(this, this._themeMethods, event);
        }
    }
}
exports.PagesPlugin = PagesPlugin;
//# sourceMappingURL=plugin.js.map